{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shadcn-cookie-consent",
  "type": "registry:block",
  "title": "Shadcn Cookie Consent",
  "description": "Beautifully designed, customizable cookie consent for web built on top of shadcn-ui and tailwind-css",
  "files": [
    {
      "path": "registry/ui/cookie-consent.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Check, Cookie, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\n\n// Define prop types\ninterface CookieConsentProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: \"default\" | \"small\" | \"mini\";\n  demo?: boolean;\n  onAcceptCallback?: () => void;\n  onDeclineCallback?: () => void;\n  description?: string;\n  learnMoreHref?: string;\n}\n\nconst CookieConsent = React.forwardRef<HTMLDivElement, CookieConsentProps>(\n  (\n    {\n      variant = \"default\",\n      demo = false,\n      onAcceptCallback = () => { },\n      onDeclineCallback = () => { },\n      className,\n      description = \"We use cookies to ensure you get the best experience on our website. For more information on how we use cookies, please see our cookie policy.\",\n      learnMoreHref = \"#\",\n      ...props\n    },\n    ref\n  ) => {\n    const [isOpen, setIsOpen] = React.useState(false);\n    const [hide, setHide] = React.useState(false);\n\n    const handleAccept = React.useCallback(() => {\n      setIsOpen(false);\n      document.cookie =\n        \"cookieConsent=true; expires=Fri, 31 Dec 9999 23:59:59 GMT\";\n      setTimeout(() => {\n        setHide(true);\n      }, 700);\n      onAcceptCallback();\n    }, [onAcceptCallback]);\n\n    const handleDecline = React.useCallback(() => {\n      setIsOpen(false);\n      setTimeout(() => {\n        setHide(true);\n      }, 700);\n      onDeclineCallback();\n    }, [onDeclineCallback]);\n\n    React.useEffect(() => {\n      try {\n        setIsOpen(true);\n        if (document.cookie.includes(\"cookieConsent=true\") && !demo) {\n          setIsOpen(false);\n          setTimeout(() => {\n            setHide(true);\n          }, 700);\n        }\n      } catch (error) {\n        console.warn(\"Cookie consent error:\", error);\n      }\n    }, [demo]);\n\n    if (hide) return null;\n\n    const containerClasses = cn(\n      \"fixed z-50 transition-all duration-700\",\n      !isOpen ? \"translate-y-full opacity-0\" : \"translate-y-0 opacity-100\",\n      className\n    );\n\n    const commonWrapperProps = {\n      ref,\n      className: cn(\n        containerClasses,\n        variant === \"mini\"\n          ? \"left-0 right-0 sm:left-4 bottom-4 w-full sm:max-w-3xl\"\n          : \"bottom-0 left-0 right-0 sm:left-4 sm:bottom-4 w-full sm:max-w-md\",\n      ),\n      ...props,\n    };\n\n    if (variant === \"default\") {\n      return (\n        <div {...commonWrapperProps}>\n          <Card className=\"m-3 shadow-lg\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-lg\">We use cookies</CardTitle>\n              <Cookie className=\"h-5 w-5\" />\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <CardDescription className=\"text-sm\">\n                {description}\n              </CardDescription>\n              <p className=\"text-xs text-muted-foreground\">\n                By clicking <span className=\"font-medium\">\"Accept\"</span>, you\n                agree to our use of cookies.\n              </p>\n              <a\n                href={learnMoreHref}\n                className=\"text-xs text-primary underline underline-offset-4 hover:no-underline\"\n              >\n                Learn more\n              </a>\n            </CardContent>\n            <CardFooter className=\"flex gap-2 pt-2\">\n              <Button\n                onClick={handleDecline}\n                variant=\"secondary\"\n                className=\"flex-1\"\n              >\n                Decline\n              </Button>\n              <Button onClick={handleAccept} className=\"flex-1\">\n                Accept\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      );\n    }\n\n    if (variant === \"small\") {\n      return (\n        <div {...commonWrapperProps}>\n          <Card className=\"m-3 shadow-lg\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2 h-0 px-4\">\n              <CardTitle className=\"text-base\">We use cookies</CardTitle>\n              <Cookie className=\"h-4 w-4\" />\n            </CardHeader>\n            <CardContent className=\"pt-0 pb-2 px-4\">\n              <CardDescription className=\"text-sm\">\n                {description}\n              </CardDescription>\n            </CardContent>\n            <CardFooter className=\"flex gap-2 h-0 py-2 px-4\">\n              <Button\n                onClick={handleDecline}\n                variant=\"secondary\"\n                size=\"sm\"\n                className=\"flex-1 rounded-full\"\n              >\n                Decline\n              </Button>\n              <Button\n                onClick={handleAccept}\n                size=\"sm\"\n                className=\"flex-1 rounded-full\"\n              >\n                Accept\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      );\n    }\n\n    if (variant === \"mini\") {\n      return (\n        <div {...commonWrapperProps}>\n          <Card className=\"mx-3 p-0 py-3 shadow-lg\">\n            <CardContent className=\"flex items-center justify-between gap-5 p-0 px-3.5\">\n              <CardDescription className=\"text-sm flex-1\">\n                {description}\n              </CardDescription>\n              <div className=\"flex items-center gap-2 sm:gap-3\">\n                <Button\n                  onClick={handleDecline}\n                  size=\"sm\"\n                  variant=\"secondary\"\n                  className=\"text-xs\"\n                >\n                  <span className=\"hidden sm:block\">Decline</span>\n                  <X className=\"h-3 w-3 sm:hidden\" />\n                  <span className=\"sr-only sm:hidden\">Decline</span>\n                </Button>\n                <Button onClick={handleAccept} size=\"sm\" className=\"text-xs\">\n                  <span className=\"hidden sm:block\">Accept</span>\n                  <Check className=\"h-3 w-3 sm:hidden\" />\n                  <span className=\"sr-only sm:hidden\">Accept</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return null;\n  }\n);\n\nCookieConsent.displayName = \"CookieConsent\";\nexport { CookieConsent };\nexport default CookieConsent;\n",
      "type": "registry:component"
    }
  ]
}